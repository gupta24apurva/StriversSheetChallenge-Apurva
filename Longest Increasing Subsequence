// O(2^N)
    // int helper(vector<int>&nums,int i,int prev)
    // {
    //     if(i==nums.size())
    //         return 0;
    //     int len=helper(nums,i+1,prev);
    //     if(prev==INT_MIN || nums[i]>prev)
    //         len=max(len,1+helper(nums,i+1,nums[i]));
        
    //     return len;
    // }
    // int lengthOfLIS(vector<int>& nums) {
    //     int n=nums.size();
    //     return helper(nums,0,INT_MIN);
    // }

    // O(N^2), O(N^2)
    // int helper(vector<int>& nums,vector<vector<int>>&dp,int prev,int i)
    // {
    //     if(i==nums.size())
    //         return 0;
    //     if(dp[i][prev+1]!=-1)
    //         return dp[i][prev+1];
        
    //     int len=helper(nums,dp,prev,i+1);
    //     if(prev==-1 || nums[i]>nums[prev])
    //         len=max(len,1+helper(nums,dp,i,i+1));
        
    //     return dp[i][prev+1]=len;
    // }
    // int lengthOfLIS(vector<int>& nums) {
    //     int n=nums.size();
    //     vector<vector<int>>dp(n,vector<int>(n+1,-1));
    //     return helper(nums,dp,-1,0);
    // }

    // O(N^2), O(N)
    // int helper(vector<int>& nums,int prev,int i,vector<int>&dp)
    // {
    //     if(i==nums.size())
    //         return 0;
    //     if(dp[prev+1]!=-1)
    //         return dp[prev+1];
        
    //     int len=helper(nums,prev,i+1,dp);
    //     if(prev==-1 || nums[i]>nums[prev])
    //         len=max(len,1+helper(nums,i,i+1,dp));
        
    //     return dp[prev+1]=len;
    // }
    // int lengthOfLIS(vector<int>& nums) {
    //     int n=nums.size();
    //     vector<int>dp(n+1,-1);
    //     return helper(nums,-1,0,dp);
    // }

    //O(N^2), O(N)
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        int ans=1;
        vector<int>dp(n,1);
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<i;j++)
            {
                if(nums[i]>nums[j])
                {
                    dp[i]=max(dp[i],1+dp[j]);
                    ans=max(ans,dp[i]);
                }
            }
        }
        return ans;
    }
