class Solution {
public:
    // bool helper(vector<int>& nums,int sum,int i)
    // {
    //     if(i==nums.size())
    //     {
    //         if(sum==0)
    //             return true;
    //         return false;
    //     }

    //     bool notTake=helper(nums,sum,i+1);
    //     bool take=false;
    //     if(nums[i]<=sum)
    //         take=helper(nums,sum-nums[i],i+1);
        
    //     return take||notTake;
    // }
    // bool canPartition(vector<int>& nums) {
    //     int n=nums.size();
    //     int sum=0;
    //     for(auto it:nums)
    //         sum+=it;
        
    //     if(sum%2!=0)
    //         return false;
        
    //     return helper(nums,sum/2,0);
    // }


    bool canPartition(vector<int>& nums) {
        int n=nums.size();
        int sum=0;
        for(auto it:nums)
            sum+=it;
        
        if(sum%2!=0)
            return false;
        
        sum/=2;
        vector<vector<int>>dp(n+1,vector<int>(sum+1));

        for(int i=0;i<=sum;i++) //nums size is 0
            dp[0][i]=0;
        for(int i=0;i<=n;i++)
            dp[i][0]=1;
        
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=sum;j++)
            {
                if(nums[i-1]<=j)
                    dp[i][j]=dp[i-1][j] || dp[i-1][j-nums[i-1]];
                    //no repeat of element of nums
                    //so we use dp[i-1][j-nums[i-1]]
                else
                    dp[i][j]=dp[i-1][j];
            }
        }

        return dp[n][sum];
    }
};
