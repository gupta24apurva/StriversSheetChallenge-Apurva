int ans=0;
    void merge(vector<int>& nums,int l,int m,int r)
    {
        int n1=m-l+1,n2=r-m;
        vector<int>v1(n1),v2(n2);
        for(int i=0;i<n1;i++)
        {
            v1[i]=nums[l+i];
        }
        for(int i=0;i<n2;i++)
        {
            v2[i]=nums[m+i+1];
        }

        int j=0;
        for(int i=0;i<n1;i++)
        {
            while(j<n2 && v1[i]>2LL*v2[j])  // imp to do dry run
                j++;
            ans+=j;
        }

        int i=0,k=l;
        j=0;
        while(i<n1 && j<n2)
        {
            if(v1[i]<=v2[j])
                nums[k++]=v1[i++];
            else
                nums[k++]=v2[j++];
        }

        while(i<n1)
            nums[k++]=v1[i++];
        while(j<n2)
            nums[k++]=v2[j++];
    }
    void mergeSort(vector<int>& nums,int l,int r)
    {
        if(l>=r)
            return;
        int m=(l+r)/2;
        mergeSort(nums,l,m);
        mergeSort(nums,m+1,r);
        merge(nums,l,m,r);
    }
    int reversePairs(vector<int>& nums) {
        int n=nums.size();
        mergeSort(nums,0,n-1);
        return ans;
    }
