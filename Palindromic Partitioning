bool isPalindrome(string s,int i,int j)
    {
        if(i>=j)
        return true;
        while(i<j)
        {
            if(s[i]!=s[j])
            return false;
            i++;j--;
        }
        return true;
    }
    int palindromicPartition(string str,int i,int j,vector<vector<int>>&dp)
    {
        if(i>=j || isPalindrome(str,i,j))
        return 0;
        if(dp[i][j]!=-1)
        return dp[i][j];
        int ans=j-i,c,left,right;
        for(int k=i;k<j;k++)
        {
            if(dp[i][k]!=-1)
            left=dp[i][k];
            else
            left=palindromicPartition(str,i,k,dp);
            if(dp[k+1][j]!=-1)
            right=dp[k+1][j];
            else
            right=palindromicPartition(str,k+1,j,dp);
            c=left+right+1;
            ans=min(c,ans);
        }
        return dp[i][j]=ans;
    }
    int palindromicPartition(string str)
    {
        // code here
        int l=str.length();
        vector<vector<int>>dp(l,vector<int>(l,-1));
        return palindromicPartition(str,0,l-1,dp);
    }
