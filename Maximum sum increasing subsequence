int helper(int arr[], int n,int prev,int i,vector<vector<int>>&dp)
// 	{
// 	    if(i==n)
// 	        return 0;
// 	    if(dp[i][prev+1]!=-1)
// 	        return dp[i][prev+1];
// 	    int notTake=helper(arr,n,prev,i+1,dp);
// 	    int take=0;
// 	    if(prev==-1 || arr[i]>arr[prev])
// 	        take=arr[i]+helper(arr,n,i,i+1,dp);
// 	    return dp[i][prev+1]=max(take,notTake);
// 	}
// 	int maxSumIS(int arr[], int n)  
// 	{  
// 	    // Your code goes here
// 	    vector<vector<int>>dp(n,vector<int>(n+1,-1));
// 	    return helper(arr,n,-1,0,dp);
// 	} 

    int maxSumIS(int arr[], int n){
        vector<int>dp(n);
        for(int i=0;i<n;i++)
            dp[i]=arr[i];
        int ans=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<i;j++)
            {
                if(arr[i]>arr[j])
                {
                    dp[i]=max(dp[i],dp[j]+arr[i]);
                }
            }
            ans=max(ans,dp[i]);
        }
        return ans;
    }
