// O(N), O(N)
    // ListNode *detectCycle(ListNode *head) {
    //     unordered_set<ListNode*> st;
    //     ListNode* curr=head;
    //     while(curr!=NULL)
    //     {
    //         if(st.find(curr)!=st.end())
    //         return curr;
    //         else
    //         st.insert(curr);

    //         curr=curr->next;
    //     }
    //     return NULL;
    // }


    //O(N), O(1)
    ListNode *detectCycle(ListNode *head) {
        if(head==NULL || head->next==NULL)
            return NULL;
        ListNode* slow=head,*fast=head,*entry=head;
        while(fast->next && fast->next->next)
        {
            slow=slow->next;
            fast=fast->next->next;
            if(slow==fast)
            {
                while(slow!=entry)
                {
                    slow=slow->next;
                    entry=entry->next;
                }
                return entry;
            }
        }
        return NULL;
    }
