// O(N), O(N), without stack
    // int trap(vector<int>& height) {
    //     int n=height.size();
    //     vector<int>leftMax(n);
    //     vector<int>rightMax(n);
    //     int m=height[0];
    //     for(int i=0;i<n;i++)
    //     {
    //         leftMax[i]=max(m,height[i]);
    //         m=leftMax[i];
    //     }
    //     m=height[n-1];
    //     for(int i=n-1;i>=0;i--)
    //     {
    //         rightMax[i]=max(m,height[i]);
    //         m=rightMax[i];
    //     }

    //     int ans=0;
    //     for(int i=0;i<n;i++)
    //     {
    //         ans+=min(leftMax[i],rightMax[i])-height[i];
    //     }
    //     return ans;
    // }

    // O(N), O(1), 2 pointer
    int trap(vector<int>& height) {
        int n=height.size();
        int left=0,right=n-1,leftMax=0,rightMax=0,ans=0;
        while(left<=right)
        {
            if(height[left]<=height[right])
            {
                if(height[left]>=leftMax)
                    leftMax=height[left];
                else
                    ans+=leftMax-height[left];
                left++;
            }
            else
            {
                if(height[right]>=rightMax)
                    rightMax=height[right];
                else
                    ans+=rightMax-height[right];
                right--;
            }
        }
        return ans;
    }
