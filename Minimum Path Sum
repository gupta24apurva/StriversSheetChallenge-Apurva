class Solution {
public:
    // int helper(vector<vector<int>>& grid,int i,int j,int m,int n)
    // {
    //     if(i<0 || i>=m || j<0 || j>=n)
    //         return INT_MAX;
    //     if(i==m-1 && j==n-1)
    //     {
    //         return grid[m-1][n-1];
    //     }
    //     int ans=grid[i][j];
    //     int down=helper(grid,i+1,j,m,n);
    //     int right=helper(grid,i,j+1,m,n);
    //     return ans+min(down,right);
    // }
    // int minPathSum(vector<vector<int>>& grid) {
    //     int m=grid.size(),n=grid[0].size();
    //     return helper(grid,0,0,m,n);
    // }

    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size(),n=grid[0].size();
        vector<vector<int>>dp(m,vector<int>(n));
        dp[0][0]=grid[0][0];
        for(int i=1;i<n;i++)
        {
            dp[0][i]=dp[0][i-1]+grid[0][i];
        }
        for(int i=1;i<m;i++)
        {
            dp[i][0]=dp[i-1][0]+grid[i][0];
        }
        for(int i=1;i<m;i++)
        {
            for(int j=1;j<n;j++)
            {
                dp[i][j]=grid[i][j]+min(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[m-1][n-1];
    }
};
