// O(MlogN)
    // bool binarySearch(vector<int>v,int target,int n)
    // {
    //     int s=0,e=n-1;
    //     while(s<=e)
    //     {
    //         int mid=(s+e)/2;
    //         if(v[mid]==target)
    //         return true;
    //         else if(target>v[mid])
    //         s=mid+1;
    //         else
    //         e=mid-1;
    //     }
    //     return false;
    // }
    // bool searchMatrix(vector<vector<int>>& matrix, int target) {
    //     int m=matrix.size(),n=matrix[0].size();
    //     int i;
    //     for(i=0;i<m;i++)
    //     {
    //         if(target>=matrix[i][0] && target<=matrix[i][n-1])
    //             return binarySearch(matrix[i],target,n);
    //     }
    //     return false;
    // }

    // O(logMN)
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m=matrix.size(),n=matrix[0].size();
        int l=0,r=n*m-1;
        while(l<=r)
        {
            int mid=(l+r)/2;
            int ele=matrix[mid/n][mid%n];
            if(ele==target)
                return true;
            else if(ele>target)
                r=mid-1;
            else
                l=mid+1;
        }
        return false;
    }
