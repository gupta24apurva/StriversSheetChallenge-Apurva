// NlogN
    // int longestConsecutive(vector<int>& nums) {
    //     sort(nums.begin(),nums.end());
    //     int n=nums.size();
    //     if(n==1 || n==0)
    //         return n;
    //     int ans=1,c=1;
    //     for(int i=1;i<n;i++)
    //     {
    //         if(nums[i]==nums[i-1]+1)
    //         {
    //             c++;
    //             ans=max(c,ans);
    //         }
    //         else if(nums[i]==nums[i-1])
    //             continue;
    //         else
    //             c=1;
    //     }
    //     return ans;
    // }

    int longestConsecutive(vector<int>& nums) {
        int n=nums.size();
        if(n==0 || n==1)
            return n;
        unordered_map<int,int>m;
        for(auto it:nums)
            m[it]++;
        
        int ans=1;
        for(int i=0;i<n;i++)
        {
            int num=nums[i];int c=1;
            if(m.find(num-1)==m.end())
            {
                while(m.find(num+1)!=m.end())
                {
                    c++;
                    num++;
                }
            }
            ans=max(ans,c);
        }
        return ans;
    }
