// void helper(vector<int>&coins,int amt,int n,int i,int c,int &ans)
    // {
    //     if(i==n)
    //     {
    //         if(amt==0)
    //             ans=min(ans,c);
    //         return;
    //     }
    //     helper(coins,amt,n,i+1,c,ans);
    //     if(coins[i]<=amt)
    //         helper(coins,amt-coins[i],n,i,c+1,ans);
    // }
    // int coinChange(vector<int>&coins,int amt)
    // {
    //     int n=coins.size();
    //     int ans=INT_MAX;
    //     helper(coins,amt,n,0,0,ans);
    //     if(ans==INT_MAX)
    //         return -1;
    //     return ans;
    // }

    int coinChange(vector<int>& coins, int amt) {
        int n=coins.size();
        if(amt==0)
        return 0;
        if(n==0)
        return -1;
        int dp[n+1][amt+1];
        int i,j;
        for(i=0;i<=amt;i++)
        dp[0][i]=INT_MAX-1;
        for(i=0;i<=n;i++)
        dp[i][0]=0;
        for(i=1;i<=amt;i++)
        {
            if(i%coins[0]==0)
            dp[1][i]=i/coins[0];
            else
            dp[1][i]=INT_MAX-1;
        }
        for(i=2;i<=n;i++)
        {
            for(j=1;j<=amt;j++)
            {
                if(coins[i-1]<=j)
                dp[i][j]=min(dp[i-1][j],1+dp[i][j-coins[i-1]]);
                else
                dp[i][j]=dp[i-1][j];
            }
        }
        if(dp[n][amt]==INT_MAX-1)
        return -1;
        return dp[n][amt];
    }
