    // int helper(int W, int wt[], int val[], int n, int i, int sum)
    // {
    //     if(i==n)
    //         return sum;
    //     int notTake=helper(W,wt,val,n,i+1,sum);
    //     int take=0;
    //     if(W>=wt[i])
    //         take=helper(W-wt[i],wt,val,n,i+1,sum+val[i]);
    //     return max(take,notTake);
    // }
    // int knapSack(int W, int wt[], int val[], int n) 
    // { 
    //   // Your code here
    //   return helper(W,wt,val,n,0,0);
    // }
    
    
    int knapSack(int W, int wt[], int val[], int n)
    {
        vector<vector<int>>dp(n+1,vector<int>(W+1));
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=W;j++)
            {
                if(i==0 || j==0)
                    dp[i][j]=0;
                else if(wt[i-1]<=j)
                    dp[i][j]=max(dp[i-1][j],val[i-1]+dp[i-1][j-wt[i-1]]);
                else
                    dp[i][j]=dp[i-1][j];
            }
        }
        return dp[n][W];
    }
