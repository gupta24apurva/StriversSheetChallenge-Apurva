// O(2^(n1+n2))
    // int helper(string text1, string text2,int n1,int n2,int i,int j)
    // {
    //     if(i==n1 || j==n2)
    //         return 0;
    //     if(text1[i]==text2[j])
    //         return 1+helper(text1,text2,n1,n2,i+1,j+1);
    //     return max(helper(text1,text2,n1,n2,i+1,j),helper(text1,text2,n1,n2,i,j+1));
    // }
    // int longestCommonSubsequence(string text1, string text2) {
    //     int n1=text1.length(),n2=text2.length();
    //     return helper(text1,text2,n1,n2,0,0);
    // }


    // O(N1*N2)
    // int helper(string text1, string text2,int n1,int n2,int i,int j,vector<vector<int>>&dp)
    // {
    //     if(i==n1 || j==n2)
    //         return 0;
    //     if(dp[i][j]!=-1)
    //         return dp[i][j];
    //     if(text1[i]==text2[j])
    //         return dp[i][j]=1+helper(text1,text2,n1,n2,i+1,j+1,dp);
    //     return dp[i][j]=max(helper(text1,text2,n1,n2,i+1,j,dp),helper(text1,text2,n1,n2,i,j+1,dp));
    // }
    // int longestCommonSubsequence(string text1, string text2) {
    //     int n1=text1.length(),n2=text2.length();
    //     vector<vector<int>>dp(n1,vector<int>(n2,-1));
    //     return helper(text1,text2,n1,n2,0,0,dp);
    // }


    int longestCommonSubsequence(string text1, string text2) {
        int n1=text1.length(),n2=text2.length();
        vector<vector<int>>dp(n1+1,vector<int>(n2+1));
        for(int i=0;i<=n1;i++)
        {
            for(int j=0;j<=n2;j++)
            {
                if(i==0 || j==0)
                    dp[i][j]=0;
                else if(text1[i-1]==text2[j-1])
                    dp[i][j]=1+dp[i-1][j-1];
                else
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        } 
        return dp[n1][n2];
    }
