vector<vector<int>> fourSum(vector<int>& nums, int target) {
        sort(nums.begin(),nums.end());
        int n=nums.size();
        vector<vector<int>>ans;
        unordered_map<long long,vector<pair<int,int>>>m;
        for(int i=0;i<n-1;i++)
        {
            for(int j=i+1;j<n;j++)
                m[nums[i]+nums[j]].push_back({i,j});
        }

        for(int i=0;i<n-1;i++)
        {
            if(i>0 && nums[i]==nums[i-1])
                continue;
            for(int j=i+1;j<n;j++)
            {
                if(j>i+1 && nums[j]==nums[j-1])
                    continue;

                long long sum=(long long)target-nums[i]-nums[j];
                if(m.find(sum)!=m.end())
                {
                    for(auto it:m[sum])
                    {
                        int k=it.first,l=it.second;
                        if(k>j)
                        {
                            if(!ans.empty() && ans.back()[0]==nums[i] && ans.back()[1]==nums[j] && ans.back()[2]==nums[k] && ans.back()[3]==nums[l])
                                continue;
                            
                            ans.push_back({nums[i],nums[j],nums[k],nums[l]});
                        }
                    }
                }
            }
        }
        return ans;
    }
