// O(N), O(N)
    // ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
    //     unordered_map<ListNode*,int>m;
    //     while(headA!=NULL)
    //     {
    //         m[headA]=1;
    //         headA=headA->next;
    //     }
    //     while(headB!=NULL)
    //     {
    //         if(m.find(headB)!=m.end())
    //             return headB;
    //         headB=headB->next;
    //     }
    //     return NULL;
    // }

    // O(N) O(1)
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        int m=0,n=0;
        ListNode* temp1=headA,*temp2=headB;
        while(temp1!=NULL)
        {
            m++;temp1=temp1->next;
        }
        while(temp2!=NULL)
        {
            n++;temp2=temp2->next;
        }

        temp1=headA;temp2=headB;
        int diff=abs(m-n);
        if(m>n)
        {
            while(diff--)
            {
                temp1=temp1->next;
            }
        }
        else
        {
            while(diff--)
            {
                temp2=temp2->next;
            }
        }

        while(temp1!=NULL && temp2!=NULL)
        {
            if(temp1==temp2)
                return temp1;
            temp1=temp1->next;
            temp2=temp2->next;
        }

        return NULL;
    }
