 // int helper(int price[],int n,int i,vector<vector<int>>&dp)
    // {
    //     if(i==0)
    //         return n*price[0];
    //     if(dp[i][n]!=-1)
    //         return dp[i][n];
        
    //     int notTake=helper(price,n,i-1,dp);
    //     int take=INT_MIN;
    //     int rodLength=i+1;
    //     if(rodLength<=n)
    //         take=price[i]+helper(price,n-rodLength,i,dp);
        
    //     return dp[i][n]=max(take,notTake);
    // }
    // int cutRod(int price[], int n) {
    //     //code here
    //     vector<vector<int>>dp(n,vector<int>(n+1,-1));
    //     return helper(price,n,n-1,dp);
    // }
    
    int cutRod(int price[], int n) {
        vector<vector<int>>dp(n,vector<int>(n+1));
        for(int i=0;i<=n;i++) 
        {
            dp[0][i]=price[0]*i;
        }
        
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<=n;j++)
            {
                int notTake=dp[i-1][j];
                int take=INT_MIN;
                int rodLength=i+1;
                if(rodLength<=j)
                {
                    take=price[i]+dp[i][j-rodLength];
                }
                
                dp[i][j]=max(take,notTake);
            }
        }
        return dp[n-1][n];
    }
